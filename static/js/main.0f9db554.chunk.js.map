{"version":3,"sources":["components/GlobalContext.tsx","components/Home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["GlobalContext","createContext","GlobalContextProvider","children","useState","videos","setVideos","useEffect","getYoutubeVideos","then","vids","Provider","value","debugStore","localForage","createInstance","name","a","getItem","items","Works","fadeIn","div","style","className","WorkVideos","useContext","map","video","i","Video","index","getThumbnail","mq","snippet","resourceId","videoId","maxhd","sd","state","showdetails","setShowdetails","useSpring","opacity","y","set","delay","onMouseEnter","onMouseLeave","src","alt","Collapse","in","title","Home","nameStyle","config","mass","friction","damping","frequency","from","top","window","innerHeight","left","innerWidth","transform","fontSize","p","span","App","createMuiTheme","typography","h1","fontFamily","fontWeight","theme","ThemeProvider","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0f9db554.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport localForage from \"localforage\";\nimport axios from \"axios\";\nimport { VideoType } from \"./video-types\";\n\ninterface ContextVal {\n  videos: VideoType[];\n}\n\nexport const GlobalContext = createContext<Partial<ContextVal>>({});\n\nexport function GlobalContextProvider({ children }: { children: any }) {\n  const [videos, setVideos] = useState<VideoType[]>([]);\n\n  useEffect(() => {\n    getYoutubeVideos().then((vids) => {\n      if (vids) setVideos(vids);\n      //   console.log(vids);\n    });\n  }, []);\n\n  return (\n    <GlobalContext.Provider value={{ videos }}>\n      {children}\n    </GlobalContext.Provider>\n  );\n}\nconst debugStore = localForage.createInstance({ name: \"debugstore\" });\n\nasync function getYoutubeVideos(): Promise<VideoType[] | undefined | []> {\n  const videos: Partial<{\n    items: VideoType[] | undefined | [];\n  } | null> = await debugStore.getItem(\"videos\");\n\n  if (videos) {\n    return videos.items;\n  }\n  return [];\n}\n","import React, { useRef, useState, useEffect, useContext } from \"react\";\nimport { Typography, Collapse } from \"@material-ui/core\";\nimport { useTransition } from \"react-spring\";\n// context\nimport { GlobalContext } from \"./GlobalContext\";\n\nimport localForage from \"localforage\";\nimport { useSpring, animated } from \"react-spring\";\nimport axios from \"axios\";\nimport YouTube from \"react-youtube\";\n\n//types\nimport { VideoType } from \"./video-types\";\nimport \"./css/home.css\";\n\ninterface HomeProps {}\nconst Home: React.FC<HomeProps> = () => {\n  const nameStyle = useSpring({\n    config: { mass: 1, friction: 10, damping: 1, frequency: 0.6 },\n    from: {\n      top: window.innerHeight / 2 - 40,\n      left: window.innerWidth / 2 - 40,\n      transform: \"translate(-50%, -50%)\",\n      fontSize: \"3rem\",\n    },\n    top: 0,\n    left: 0,\n    transform: \"translate(0,0)\",\n    fontSize: \"2rem\",\n    delay: 1000,\n  });\n\n  const fadeIn = useSpring({\n    from: {\n      opacity: 0,\n    },\n    opacity: 1,\n    delay: 1500,\n  });\n\n  return (\n    <div className=\"home\">\n      <nav>\n        <div className=\"left\">\n          <animated.p style={nameStyle} className=\"name\">\n            Jai Mangal Sharma\n          </animated.p>\n          {/* @ts-ignore */}\n          <animated.span style={fadeIn} className=\"subtitle\">\n            FILM MAKER\n          </animated.span>\n        </div>\n      </nav>\n      <Works fadeIn={fadeIn} />\n    </div>\n  );\n};\n\nfunction Works({ fadeIn }: { fadeIn: any }) {\n  return (\n    <animated.div style={fadeIn} className=\"works\">\n      <p className=\"work-title\">Works</p>\n      <WorkVideos />\n    </animated.div>\n  );\n}\nfunction WorkVideos() {\n  const { videos } = useContext(GlobalContext);\n\n  /* return (\n    <>\n      {transitions.map(function ({ item, props, key }: any) {\n        // <Video key={key} video={item} animstyle={props} />\n        console.log(item, props, key);\n        return <></>;\n      })}\n    </>\n  ); */\n  return (\n    <div className=\"work-videos\">\n      {videos?.map((video, i) => (\n        <Video key={i} index={i} video={video} />\n      ))}\n    </div>\n  );\n}\n\nfunction getThumbnail(\n  video: VideoType\n): { mq: string; maxhd: string; sd: string } {\n  return {\n    mq: `http://img.youtube.com/vi/${video.snippet.resourceId.videoId}/mqdefault.jpg`,\n    maxhd: `http://img.youtube.com/vi/${video.snippet.resourceId.videoId}/maxresdefault.jpg`,\n    sd: `http://img.youtube.com/vi/${video.snippet.resourceId.videoId}/sddefault.jpg`,\n  };\n}\nfunction Video({\n  video,\n  index,\n}: {\n  video: VideoType;\n  animstyle?: any;\n  index: number;\n}) {\n  const [state, setState] = useState(\"idel\");\n  const [showdetails, setShowdetails] = useState(false);\n  const [style, set] = useSpring(() => {\n    return { opacity: 0, y: 100 };\n  });\n\n  useEffect(() => {\n    set({ opacity: 1, y: 0, delay: 1500 + index * 100 });\n  }, [set, index]);\n\n  return (\n    <>\n      <animated.div\n        // @ts-ignore\n        style={style}\n        className=\"work-video\"\n        onMouseEnter={() => setShowdetails(true)}\n        onMouseLeave={() => setShowdetails(false)}\n      >\n        {video && state ? (\n          <img src={getThumbnail(video).mq} alt=\"\" className=\"thumbnail\" />\n        ) : (\n          <></>\n        )}\n        <Collapse in={showdetails}>\n          <div className=\"details\">\n            <p className=\"title\">{video.snippet.title}</p>\n          </div>\n        </Collapse>\n      </animated.div>\n    </>\n  );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { GlobalContextProvider } from \"./components/GlobalContext\";\nfunction App() {\n  const [theme, setTheme] = useState(\n    createMuiTheme({\n      typography: {\n        h1: {\n          fontFamily: \"'Josefin Sans', sans-serif\",\n          fontWeight: 400,\n        },\n      },\n    })\n  );\n\n  return (\n    <GlobalContextProvider>\n      <ThemeProvider theme={theme}>\n        <Home />\n      </ThemeProvider>\n    </GlobalContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport localForage from \"localforage\";\n\nimport axios from \"axios\";\n\n(async () => {\n  let apikey = \"AIzaSyBlqsRM4RuYF5Xe13wySA11TWn84TJiSN8\";\n  let channelID = \"UCEjTjW7OVRaT0M1e761hfKw\";\n  var videosUrl = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=PLp1LthaVYwB1qNCOeTXJL2TIP0q-oQcoW&key=${apikey}`;\n  // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=${channelID}&order=date&part=snippet&type=video&maxResults=10&key=${apikey}`;\n  // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=UCEjTjW7OVRaT0M1e761hfKw&order=date&part=snippet&type=video&maxResults=10&key=AIzaSyD16h4hSvH16RBC99E5QAUaLD1fFHrD_rQ`;\n  // let data = await axios.get(videosUrl).catch((e) => console.log(e));\n  // console.log(await debugStore.getItem(\"videos\"));\n})();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}