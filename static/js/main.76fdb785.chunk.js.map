{"version":3,"sources":["components/Home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["localForage","createInstance","name","getItem","then","videos","console","log","items","forEach","video","snippet","thumbnails","high","Works","fadeIn","div","style","className","WorkVideos","Home","nameStyle","useSpring","config","mass","friction","damping","frequency","from","top","window","innerHeight","left","innerWidth","transform","fontSize","delay","opacity","p","span","App","useState","createMuiTheme","typography","h1","fontFamily","fontWeight","theme","ThemeProvider","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","a","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.76fdb785.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nimport localForage from \"localforage\";\nimport { useSpring, animated } from \"react-spring\";\nimport \"./css/home.css\";\n\nasync function getYoutubeVideos() {}\n\nconst debugStore = localForage.createInstance({ name: \"debugstore\" });\ndebugStore.getItem(\"videos\").then((videos: any) => {\n  console.log(videos);\n\n  videos.items.forEach((video: any) => {\n    console.log(video.snippet.thumbnails.high);\n    // window.open(getThumbnail(video).maxhd);\n  });\n});\n\nfunction getThumbnail(\n  video: Partial<{\n    snippet: {\n      resourceId: {\n        videoId: string;\n      };\n    };\n  }>\n): { mq: string; maxhd: string; sd: string } {\n  return {\n    mq: `http://img.youtube.com/vi/${video?.snippet?.resourceId?.videoId}/mqdefault.jpg`,\n    maxhd: `http://img.youtube.com/vi/${video?.snippet?.resourceId?.videoId}/maxresdefault.jpg`,\n    sd: `http://img.youtube.com/vi/${video?.snippet?.resourceId?.videoId}/sddefault.jpg`,\n  };\n}\n\ninterface HomeProps {}\nconst Home: React.FC<HomeProps> = () => {\n  const nameStyle = useSpring({\n    config: { mass: 1, friction: 20, damping: 0.6, frequency: 0.5 },\n    from: {\n      top: window.innerHeight / 2 - 40,\n      left: window.innerWidth / 2 - 40,\n      transform: \"translate(-50%, -50%)\",\n      fontSize: \"3rem\",\n    },\n    top: 0,\n    left: 0,\n    transform: \"translate(0,0)\",\n    fontSize: \"2rem\",\n    delay: 1000,\n  });\n\n  const fadeIn = useSpring({\n    from: {\n      opacity: 0,\n    },\n    opacity: 1,\n    delay: 1500,\n  });\n\n  return (\n    <div className=\"home\">\n      <nav>\n        <div className=\"left\">\n          <animated.p style={nameStyle} className=\"name\">\n            Jai Mangal Sharma\n          </animated.p>\n          {/* @ts-ignore */}\n          <animated.span style={fadeIn} className=\"subtitle\">\n            FILM MAKER\n          </animated.span>\n        </div>\n      </nav>\n      <Works fadeIn={fadeIn} />\n    </div>\n  );\n};\n\nfunction Works({ fadeIn }: { fadeIn: any }) {\n  return (\n    <animated.div style={fadeIn} className=\"works\">\n      <p className=\"work-title\">Works</p>\n      <WorkVideos />\n    </animated.div>\n  );\n}\nfunction WorkVideos() {\n  return <div className=\"work-videos\"></div>;\n}\n\nfunction Video({}) {\n  return <div className=\"work-video\"></div>;\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\n    createMuiTheme({\n      typography: {\n        h1: {\n          fontFamily: \"'Josefin Sans', sans-serif\",\n          fontWeight: 400,\n        },\n      },\n    })\n  );\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <Home />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport localForage from \"localforage\";\n\nimport axios from \"axios\";\n\n(async () => {\n  let apikey = \"AIzaSyBlqsRM4RuYF5Xe13wySA11TWn84TJiSN8\";\n  let channelID = \"UCEjTjW7OVRaT0M1e761hfKw\";\n  var videosUrl = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=PLp1LthaVYwB1qNCOeTXJL2TIP0q-oQcoW&key=${apikey}`;\n  // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=${channelID}&order=date&part=snippet&type=video&maxResults=10&key=${apikey}`;\n  // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=UCEjTjW7OVRaT0M1e761hfKw&order=date&part=snippet&type=video&maxResults=10&key=AIzaSyD16h4hSvH16RBC99E5QAUaLD1fFHrD_rQ`;\n  // let data = await axios.get(videosUrl).catch((e) => console.log(e));\n  // console.log(await debugStore.getItem(\"videos\"));\n})();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}