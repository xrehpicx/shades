{"version":3,"sources":["components/GlobalContext.tsx","components/Home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["GlobalContext","createContext","GlobalContextProvider","children","useState","videos","setVideos","useEffect","getYoutubeVideos","then","vids","Provider","value","debugStore","localForage","createInstance","name","a","videosUrl","axios","get","data","items","getItem","ResponsiveDialog","React","open","setOpen","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","history","useHistory","location","useLocation","video","setVideo","loading","setLoading","useContext","filter","vid","snippet","resourceId","videoId","handleClose","push","URLSearchParams","search","copied","setCopied","copyTextToClipboard","window","href","navigator","share","title","text","url","console","log","catch","error","Dialog","scroll","onClose","PaperProps","style","background","aria-labelledby","DialogActions","Button","color","onClick","CopiedToClipboard","set","LinearProgress","className","onReady","containerClassName","description","split","map","line","i","setTimeout","Collapse","in","display","textAlign","padding","Works","fadeIn","div","WorkVideos","Video","index","getThumbnail","mq","maxhd","sd","state","showdetails","setShowdetails","useSpring","opacity","y","delay","position","onMouseEnter","onMouseLeave","src","alt","Number","Home","nameStyle","config","mass","friction","damping","frequency","from","top","innerHeight","left","innerWidth","transform","fontSize","p","span","textArea","document","createElement","body","appendChild","focus","select","msg","execCommand","err","removeChild","App","createMuiTheme","typography","h1","fontFamily","fontWeight","ThemeProvider","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.53101bdc.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport localForage from \"localforage\";\nimport axios from \"axios\";\nimport { VideoType } from \"./video-types\";\n\ninterface ContextVal {\n  videos: VideoType[];\n}\n\nexport const GlobalContext = createContext<Partial<ContextVal>>({});\n\nexport function GlobalContextProvider({ children }: { children: any }) {\n  const [videos, setVideos] = useState<VideoType[]>([]);\n\n  useEffect(() => {\n    getYoutubeVideos().then((vids) => {\n      if (vids) setVideos(vids);\n      //   console.log(vids);\n    });\n  }, []);\n\n  return (\n    <GlobalContext.Provider value={{ videos }}>\n      {children}\n    </GlobalContext.Provider>\n  );\n}\nconst debugStore = localForage.createInstance({ name: \"debugstore\" });\n\nasync function getYoutubeVideos(): Promise<VideoType[] | undefined | []> {\n  if (process.env.NODE_ENV === \"production\") {\n    let apikey = \"AIzaSyBlqsRM4RuYF5Xe13wySA11TWn84TJiSN8\";\n\n    var videosUrl = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=PLp1LthaVYwB1qNCOeTXJL2TIP0q-oQcoW&key=${apikey}`;\n    // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=${channelID}&order=date&part=snippet&type=video&maxResults=10&key=${apikey}`;\n    // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=UCEjTjW7OVRaT0M1e761hfKw&order=date&part=snippet&type=video&maxResults=10&key=AIzaSyD16h4hSvH16RBC99E5QAUaLD1fFHrD_rQ`;\n    //   let data = await axios.get(videosUrl).catch((e) => console.log(e));\n    // console.log(await debugStore.getItem(\"videos\"));\n    const videos: Partial<{\n      items: VideoType[] | undefined | [];\n    } | null> = (await axios.get(videosUrl)).data;\n\n    if (videos) {\n      return videos.items;\n    }\n    return [];\n  }\n  const videos: Partial<{\n    items: VideoType[] | undefined | [];\n  } | null> = await debugStore.getItem(\"videos\");\n\n  if (videos) {\n    return videos.items;\n  }\n  return [];\n}\n","import React, { useRef, useState, useEffect, useContext } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useHistory,\n  useParams,\n  useLocation,\n} from \"react-router-dom\";\n\nimport {\n  Typography,\n  Collapse,\n  Dialog,\n  DialogActions,\n  Button,\n  LinearProgress,\n  IconButton,\n} from \"@material-ui/core\";\nimport ShareOutlinedIcon from \"@material-ui/icons/ShareOutlined\";\n\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\n// import { useTransition } from \"react-spring\";\n// context\nimport { GlobalContext } from \"./GlobalContext\";\nimport { useSpring, animated } from \"react-spring\";\nimport YouTube from \"react-youtube\";\n\n//types\nimport { VideoType } from \"./video-types\";\nimport \"./css/home.css\";\n\nfunction ResponsiveDialog() {\n  const [open, setOpen] = React.useState(\"\");\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const history = useHistory();\n  const location = useLocation();\n  const [video, setVideo] = useState<VideoType>();\n  const [loading, setLoading] = useState(true);\n\n  const { videos } = useContext(GlobalContext);\n\n  useEffect(() => {\n    if (open && videos) {\n      setVideo(\n        videos.filter((vid) => vid.snippet.resourceId.videoId === open)[0]\n      );\n    }\n  }, [videos, open]);\n  const handleClose = () => {\n    setOpen(\"\");\n    setLoading(true);\n    history.push(\"/\");\n  };\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const videoId = searchParams.get(\"videoId\");\n    if (videoId) {\n      setOpen(videoId);\n    } else {\n      setOpen(\"\");\n    }\n  }, [location]);\n\n  const [copied, setCopied] = useState(false);\n\n  async function share() {\n    copyTextToClipboard(window.location.href);\n    setCopied(true);\n\n    navigator\n      .share({\n        title: video?.snippet.title,\n        text: video?.snippet.title,\n        url: window.location.href,\n      })\n      .then(() => console.log(\"Share was successful.\"))\n      .catch((error) => console.log(\"Sharing failed\", error));\n  }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={!!open}\n      scroll=\"body\"\n      onClose={handleClose}\n      PaperProps={{ style: { background: \"var(--background)\" } }}\n      aria-labelledby=\"responsive-dialog-title\"\n    >\n      <DialogActions>\n        <Button style={{ color: \"white\" }} onClick={handleClose}>\n          close\n        </Button>\n        <Button onClick={share}>\n          <ShareOutlinedIcon color=\"primary\" />\n        </Button>\n      </DialogActions>\n      <CopiedToClipboard open={copied} set={setCopied} />\n      {loading ? <LinearProgress /> : <></>}\n      <div className=\"player\">\n        <div className=\"youtube\">\n          <YouTube\n            onReady={() => {\n              setLoading(false);\n            }}\n            containerClassName=\"iframeContainer\"\n            videoId={video?.snippet.resourceId.videoId}\n          />\n        </div>\n      </div>\n      <div className=\"video-details\">\n        <p className=\"title\">{video?.snippet.title}</p>\n        <div className=\"subtitle\">\n          {video?.snippet.description.split(\"\\n\").map((line, i) => {\n            return <p key={i}>{line}</p>;\n          })}\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nfunction CopiedToClipboard({\n  set,\n  open,\n}: {\n  set: React.Dispatch<React.SetStateAction<boolean>>;\n  open: boolean;\n}) {\n  useEffect(() => {\n    if (open) {\n      setTimeout(() => {\n        set(false);\n      }, 2000);\n    }\n    // eslint-disable-next-line\n  }, [open]);\n\n  return (\n    <Collapse in={open}>\n      <span\n        style={{\n          display: \"block\",\n          color: \"var(--accent)\",\n          textAlign: \"right\",\n          padding: \"10px\",\n        }}\n        className=\"alert-text\"\n      >\n        Copied link\n      </span>\n    </Collapse>\n  );\n}\ninterface HomeProps {}\nconst Home: React.FC<HomeProps> = () => {\n  const nameStyle = useSpring({\n    config: { mass: 1, friction: 10, damping: 1, frequency: 0.6 },\n    from: {\n      top: window.innerHeight / 2 - 40,\n      left: window.innerWidth / 2 - 40,\n      transform: \"translate(-50%, -50%)\",\n      fontSize: \"3rem\",\n    },\n    top: 0,\n    left: 0,\n    transform: \"translate(0,0)\",\n    fontSize: \"2rem\",\n    delay: 1000,\n  });\n\n  const fadeIn = useSpring({\n    from: {\n      opacity: 0,\n    },\n    opacity: 1,\n    delay: 1500,\n  });\n\n  return (\n    <>\n      <ResponsiveDialog />\n      <div className=\"home\">\n        <nav>\n          <div className=\"left\">\n            <animated.p style={nameStyle} className=\"name\">\n              Jai Mangal Sharma\n            </animated.p>\n            {/* @ts-ignore */}\n            <animated.span style={fadeIn} className=\"subtitle\">\n              FILM MAKER\n            </animated.span>\n          </div>\n        </nav>\n        <Works fadeIn={fadeIn} />\n      </div>\n    </>\n  );\n};\n\nfunction ViewVideoPage({ playing }: { playing: string }) {\n  const [video, setVideo] = useState<VideoType>();\n\n  const { videos } = useContext(GlobalContext);\n\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (playing && videos && videos.length) {\n      // ref.current?.scrollIntoView({ behavior: \"smooth\" });\n      setVideo(\n        videos.filter((vid) => vid.snippet.resourceId.videoId === playing)[0]\n      );\n      window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n  }, [playing, videos]);\n\n  return (\n    <Collapse in={!!playing}>\n      <div ref={ref} className=\"player\">\n        <YouTube containerClassName=\"bigplayer\" videoId={playing} />\n        <div className=\"video-details\">\n          <p className=\"title\">{video?.snippet.title}</p>\n          <div className=\"subtitle\">\n            {video?.snippet.description.split(\"\\n\").map((line, i) => {\n              return <p key={i}>{line}</p>;\n            })}\n          </div>\n        </div>\n      </div>\n    </Collapse>\n  );\n}\n\nfunction Works({ fadeIn }: { fadeIn: any }) {\n  return (\n    <animated.div style={fadeIn} className=\"works\">\n      <p className=\"work-title\">My Works</p>\n      <WorkVideos />\n    </animated.div>\n  );\n}\nfunction WorkVideos() {\n  const { videos } = useContext(GlobalContext);\n\n  /* return (\n    <>\n      {transitions.map(function ({ item, props, key }: any) {\n        // <Video key={key} video={item} animstyle={props} />\n        console.log(item, props, key);\n        return <></>;\n      })}\n    </>\n  ); */\n  return (\n    <div className=\"work-videos\">\n      {videos?.map((video, i) => (\n        <Video key={i} index={i} video={video} />\n      ))}\n    </div>\n  );\n}\n\nfunction getThumbnail(\n  video: VideoType\n): { mq: string; maxhd: string; sd: string } {\n  return {\n    mq: `http://img.youtube.com/vi/${video.snippet.resourceId.videoId}/mqdefault.jpg`,\n    maxhd: `http://img.youtube.com/vi/${video.snippet.resourceId.videoId}/maxresdefault.jpg`,\n    sd: `http://img.youtube.com/vi/${video.snippet.resourceId.videoId}/sddefault.jpg`,\n  };\n}\nfunction Video({\n  video,\n  index,\n}: {\n  video: VideoType;\n  animstyle?: any;\n  index: number;\n}) {\n  const [state, setState] = useState(\"idel\");\n  const [showdetails, setShowdetails] = useState(false);\n  const [style, set] = useSpring(() => {\n    return { opacity: 0, y: 100 };\n  });\n\n  useEffect(() => {\n    set({ opacity: 1, y: 0, delay: 1500 + index * 100 });\n  }, [set, index]);\n\n  const history = useHistory();\n\n  return (\n    <>\n      <animated.div\n        // @ts-ignore\n        style={{ ...style, position: index === 0 ? \"relative\" : \"\" }}\n        className=\"work-video\"\n        onClick={() => {\n          history.push(\"/?videoId=\" + video.snippet.resourceId.videoId);\n        }}\n        onMouseEnter={() => setShowdetails(true)}\n        onMouseLeave={() => setShowdetails(false)}\n      >\n        {video && state ? (\n          <img src={getThumbnail(video).mq} alt=\"\" className=\"thumbnail\" />\n        ) : (\n          <></>\n        )}\n        <div className=\"details\" style={{ opacity: Number(showdetails) }}>\n          <p className=\"title\">{video.snippet.title}</p>\n        </div>\n      </animated.div>\n    </>\n  );\n}\n\nexport default Home;\nfunction copyTextToClipboard(text: string) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand(\"copy\");\n    var msg = successful ? \"successful\" : \"unsuccessful\";\n    console.log(\"Copying text command was \" + msg);\n  } catch (err) {\n    console.log(\"Oops, unable to copy\");\n  }\n\n  document.body.removeChild(textArea);\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { GlobalContextProvider } from \"./components/GlobalContext\";\nfunction App() {\n  const [theme, setTheme] = useState(\n    createMuiTheme({\n      typography: {\n        h1: {\n          fontFamily: \"'Josefin Sans', sans-serif\",\n          fontWeight: 400,\n        },\n      },\n    })\n  );\n\n  return (\n    <Router>\n      <GlobalContextProvider>\n        <ThemeProvider theme={theme}>\n          <Home />\n        </ThemeProvider>\n      </GlobalContextProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport localForage from \"localforage\";\n\nimport axios from \"axios\";\n\n(async () => {\n  let apikey = \"AIzaSyBlqsRM4RuYF5Xe13wySA11TWn84TJiSN8\";\n  let channelID = \"UCEjTjW7OVRaT0M1e761hfKw\";\n  var videosUrl = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=PLp1LthaVYwB1qNCOeTXJL2TIP0q-oQcoW&key=${apikey}`;\n  // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=${channelID}&order=date&part=snippet&type=video&maxResults=10&key=${apikey}`;\n  // var videosUrl = `https://www.googleapis.com/youtube/v3/search?channelId=UCEjTjW7OVRaT0M1e761hfKw&order=date&part=snippet&type=video&maxResults=10&key=AIzaSyD16h4hSvH16RBC99E5QAUaLD1fFHrD_rQ`;\n  // let data = await axios.get(videosUrl).catch((e) => console.log(e));\n  // console.log(await debugStore.getItem(\"videos\"));\n})();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}